# makefile for testing Lua

srcdir=@srcdir@
top_srcdir=@top_srcdir@
top_builddir=@top_builddir@

EXESUF=@EXESUF@

HKSC_SUPPRESS_LOGGING=@HKSC_SUPPRESS_LOGGING@
HKSC_PREFIX_MAP=@HKSC_PREFIX_MAP@
HKSC_GEN_PROFILE=@HKSC_GEN_PROFILE@
HKSC_GEN_DEBUG=@HKSC_GEN_DEBUG@
HKSC_LOAD_PROFILE=@HKSC_LOAD_PROFILE@
HKSC_LOAD_DEBUG=@HKSC_LOAD_DEBUG@
HKSC_LOAD_MAIN_BYTECODE=@HKSC_LOAD_MAIN_BYTECODE@
HKSC_CMP_CODE=@HKSC_CMP_CODE@
HKSC_CMP_PROFILE=@HKSC_CMP_PROFILE@
HKSC_CMP_DEBUG=@HKSC_CMP_DEBUG@
WITH_COD_EXT=@WITH_COD_EXT@

RM=@RM@

HKSC_VERSION=@HKSC_VERSION@

# will be set to .dtest by configure if the decompiler is enabled
# *.dtest will depend on *.ctest, so compiler tests will always be run, and then
# if the decompiler is enabled, the decompiler tests will be run
TESTSUFFIX=@TESTSUFFIX@

@VPATH_SET@

# should be set by the parent Makefile in the invokation
HKSC_NAME=hksc

HKSC=$(top_builddir)/src/$(HKSC_NAME)$(EXESUF)

# flags for loading source files
HKSCAFLAGS=-L $(HKSC_SUPPRESS_LOGGING) $(HKSC_PREFIX_MAP)
# flags for loading binary files
HKSCBFLAGS=$(HKSC_SUPPRESS_LOGGING)

TESTMAKEFLAGS=

MAKELOG=./tests.$(HKSC_NAME).log

ALL_SRC=	00_comment.lua \
	01_k.lua \
	02_constfold.lua \
	03_float.lua \
	04_intliterallud.lua \
	05_table.lua \
	06_bigtable.lua \
	07_utf8_bom.lua \
	08_fornum.lua \
	09_forlist.lua \
	10_function.lua \
	11_repeat.lua \
	12_while.lua \
	13_do.lua \
	14_bool.lua \
	15_precedence.lua \
	16_numeric_literals.lua \
	17_recursion.lua \
	18_testset.lua \
	19_multiple_table_index.lua \
	20_break.lua \
	21_nested_break.lua \
	22_bracket_evaluation.lua \
	23_dead_code.lua \
	24_dead_closure.lua \
	25_nested_closure.lua \
	26_nested_call.lua \
	27_vararg.lua \
	28_func_name.lua \
	29_long_func_name.lua \
	30_long_string.lua

ALL_TESTS=$(ALL_SRC:.lua=@TESTSUFFIX@)

all: prepare dummy version error $(ALL_TESTS)
	@echo ----------------------------
	@echo ---------------------------- >> $(MAKELOG)
	@echo All Lua tests passed
	@echo All Lua tests passed >> $(MAKELOG)
	@echo

prepare: clean checkexpect
	@echo
	@echo Starting Lua tests...
	@echo Starting Lua tests... > $(MAKELOG)
	@echo ----------------------------
	@echo ---------------------------- >> $(MAKELOG)

checkexpect:
	@if test ! -e expect.sum; then \
		echo You need to generate expect.sum; \
		exit 1; \
	fi
	@shasum -a1 -c expect.sum >/dev/null

expect:
	@if test ! -e $(GEN_EXPECT) || test ! -x $(GEN_EXPECT); then \
		echo "Nothing to do: $(GEN_EXPECT) not found"; \
		exit 1; \
	fi
	HKSCAFLAGS='$(HKSCAFLAGS)' $(GEN_EXPECT) --srcdir='$(srcdir)' --hksc='$(HKSC)'

expectsum:
	@files= ; \
	for f in *.cexpect *.debugexpect *.profileexpect; do \
		files="$$files $(srcdir)/$${f%.*}.lua"; \
	done; \
	shasum -a1 -U $$files > expect.sum

# for when $(TESTS) is empty
# also checks that HKSC was set properly
dummy:
	@$(HKSC) --version >/dev/null 2>&1

# check version of $(HKSC) against expected version
version:
	@echo checking \`$(HKSC) --version\` against $(HKSC_VERSION); \
	HKSC_VERSION_REGEX=`echo $(HKSC_VERSION) | sed 's/\./\\./g'`; \
	$(HKSC) --version 2>&1 | grep -iq ".*hksc[^0-9]*$$HKSC_VERSION_REGEX"

error:
	@cd $@ && $(MAKE) $(TESTMAKEFLAGS) HKSC_NAME=$(HKSC_NAME)


.SUFFIXES:
.SUFFIXES: .lua .cexpect .profileexpect .debugexpect .ctest .dtest

# .lua.luac:
# 	$(HKSC) --compile -s $< -o $@

# .lua.cexpect:
# 	@echo You need to regenerate $@!; false
# .lua.profileexpect:
# 	@echo You need to regenerate $@!; false
# .lua.debugexpect:
# 	@echo You need to regenerate $@!; false

# .profileexpect.ctest:
# 	@:
# .debugexpect.ctest:
# 	@:

# compiler test + bytecode loader test
.cexpect.ctest:
	@echo ------------ $* ------------
	@echo ------------ $* ------------ >> $(MAKELOG)
# 	generate stripped bytecode
	@echo $(HKSC) $(HKSCAFLAGS) -s $(srcdir)/$*.lua -o $*.luac >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) -s $(srcdir)/$*.lua -o $*.luac
# 	generate profile info
	@echo $(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_PROFILE) $*.luaprofile \
	$(srcdir)/$*.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_PROFILE) $*.luaprofile $(srcdir)/$*.lua
# 	generate debug info
	@echo $(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_DEBUG) $*.luadebug \
	$(srcdir)/$*.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_DEBUG) $*.luadebug $(srcdir)/$*.lua
# 	compare code with expected
	@echo $(HKSC_CMP_CODE) $*.cexpect $*.luac >> $(MAKELOG)
	@ $(HKSC_CMP_CODE) $*.cexpect $*.luac; \
	if test $$? = 0; then echo "$*.luac OK"; fi
# 	compare profile info with expected
	@echo $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile >> $(MAKELOG)
	@ $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile; \
	if test $$? = 0; then echo "$*.luaprofile OK"; fi
# 	compare debug info with expected
	@echo $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug >> $(MAKELOG)
	@ $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug; \
	if test $$? = 0; then echo "$*.luadebug OK"; fi
# 	check bytecode loader by loading $*.luac and dumping it again
# 	echo the command for logs
	@echo HKSC='$(HKSC)' HKSCFLAGS='$(HKSCBFLAGS)' $(srcdir)/redump \
	--cod=$(WITH_COD_EXT) --bytecode-file=$*.luac --profile-file=$*.luaprofile \
	--debug-file=$*.luadebug >> $(MAKELOG)
# 	redump everything to check that the bytecode loader works
	@HKSC='$(HKSC)' HKSCFLAGS='$(HKSCBFLAGS)' $(srcdir)/redump \
	--cod=$(WITH_COD_EXT) --bytecode-file=$*.luac --profile-file=$*.luaprofile \
	--debug-file=$*.luadebug
# 	compare redumped code with expected
	@echo $(HKSC_CMP_CODE) $*.cexpect $*.luac >> $(MAKELOG)
	@ $(HKSC_CMP_CODE) $*.cexpect $*.luac
# 	compare redumped profile info with expected
	@echo $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile >> $(MAKELOG)
	@ $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile
# 	compare redumped debug info with expected
	@echo $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug >> $(MAKELOG)
	@ $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug

# decompiler test, run after compiler and bytecode loader tests
.ctest.dtest:
	@ echo hello $@

Makefile: $(srcdir)/Makefile.in $(top_srcdir)/configure
	@echo regenerating test/$@
	@cd $(top_builddir) && @CONFIGURE@ > /dev/null

clean:
	-@$(RM) *.luac *.luadebug *.luaprofile *.luacallstackdb *.ctest *.dtest
	@cd error && $(MAKE) $@

.PHONY: test all checkexpect expectsum dummy clean version error

# (end of Makefile)

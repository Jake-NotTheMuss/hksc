# makefile for testing Lua

srcdir=@srcdir@
top_srcdir=@top_srcdir@
top_builddir=@top_builddir@

EXESUF=@EXESUF@

HKSC_TARGET_PLAT=@HKSC_TARGET_PLAT@
HKSC_PREFIX_MAP=@HKSC_PREFIX_MAP@
HKSC_GEN_PROFILE=@HKSC_GEN_PROFILE@
HKSC_GEN_DEBUG=@HKSC_GEN_DEBUG@
HKSC_CMP_CODE=@HKSC_CMP_CODE@
HKSC_CMP_PROFILE=@HKSC_CMP_PROFILE@
HKSC_CMP_DEBUG=@HKSC_CMP_DEBUG@
WITH_COD_EXT=@WITH_COD_EXT@

RM=@RM@

HKSC_VERSION=@HKSC_VERSION@

# will be set to .dtest by configure if the decompiler is enabled
# *.dtest will depend on *.ctest, so compiler tests will always be run, and then
# if the decompiler is enabled, the decompiler tests will be run
TESTSUFFIX=@TESTSUFFIX@

@VPATH_SET@

# should be set by the parent Makefile in the invokation
HKSC_NAME=hksc

HKSC=$(top_builddir)/src/$(HKSC_NAME)$(EXESUF)

# flags for loading source files
HKSCAFLAGS=-L $(HKSC_TARGET_PLAT) $(HKSC_PREFIX_MAP)
# flags for loading binary files
HKSCBFLAGS=$(HKSC_TARGET_PLAT)
# flags for loading decompilation files
HKSCDFLAGS=-L $(HKSC_TARGET_PLAT) --file-prefix-map=$*.dec.lua=$*.lua

TESTMAKEFLAGS=

MAKELOG=./tests.$(HKSC_NAME).log

# these tests are not interesting for decompiler pass1
NOPASS1_SRC=	00_comment.lua \
	01_k.lua \
	02_constfold.lua \
	03_float.lua \
	04_intliterallud.lua \
	05_table.lua \
	06_bigtable.lua \
	07_bool.lua \
	08_utf8_bom.lua \
	09_precedence.lua \
	10_numeric_literals.lua \
	11_bracket_evaluation.lua \
	12_func_name.lua \
	13_long_func_name.lua \
	14_long_string.lua \
	15_do.lua

# decompiler pass1 tests
PASS1_SRC=	16_fornum.lua \
	17_forlist.lua \
	18_repeat.lua \
	19_while.lua \
	20_function.lua \
	21_recursion.lua \
	22_testset.lua \
	23_multiple_table_index.lua \
	24_break.lua \
	25_nested_break.lua \
	26_dead_code.lua \
	27_dead_closure.lua \
	28_nested_closure.lua \
	29_nested_call.lua \
	30_vararg.lua \
	31_early_return.lua \
	32_early_break.lua \
	33_concat_call.lua \
	34_testset_with_test.lua \
	35_emptyif.lua \
	36_emptyelse.lua \
	37_emptywhile.lua \
	38_upvalue_repeatorwhile.lua \
	39_optimizedbreak.lua \
	40_repuntilfalse.lua \
	41_repuntiltrue.lua \
	42_whilefalse.lua \
	43_upvalue_repuntilfalse.lua \
	44_break_repuntilfalse.lua \
	45_empty_repuntiltrue.lua \
	46_b2b_while_false.lua \
	47_rep_break_until_true.lua \
	48_while_rep_break_until_true.lua \
	49_ifelse_rep_break_until_true.lua \
	50_b2b_rep_break_until_true.lua \
	51_while2_if_false.lua \
	52_nested_ifelse.lua \
	53_do_ifelse_do.lua \
	54_erro_if.lua \
	55_whilewhile.lua \
	56_while_if_false.lua \
	57_while_tailbranch.lua \
	58_while_emptytailbranch.lua \
	59_ifsingle.lua \
	60_ifsingle_upval.lua \
	61_ifsingle_upval_2.lua \
	62_nested_if_false_groups.lua \
	63_nested_if_false_siblings.lua \
	64_if_false_else.lua \
	65_do_if_false.lua \
	66_do_if_false_b2b.lua \
	67_while_if_false_2.lua \
	68_iffalse_upval.lua \
	69_iffalse_upval_nested.lua \
	70_iffalse_upval_nested_2.lua \
	71_erro_while.lua \
	72_potential_doblock.lua \
	73_iffalse_upval.lua \
	74_iffalse_doblocks.lua \
	93_melded_repeat.lua \
	94_melded_if.lua

PASS2_SRC=	75_locvar.lua \
	76_assignment.lua \
	77_locvarlist.lua \
	78_assignmentlist.lua \
	79_assignmentlist2.lua \
	80_binop.lua \
	81_binop_in_list.lua \
	82_binop_linemap.lua \
	83_unop.lua \
	84_loadnil.lua \
	85_callexpr.lua \
	86_openexpr.lua \
	87_multiplestore.lua \
	88_callstat.lua \
	89_loadnil_before_openexpr.lua \
	90_b2b_nil_explist.lua \
	91_selfcall.lua \
	92_selfcall_reg.lua \
	95_emptyconstructor.lua \
	96_arrayconstructor.lua \
	97_hashconstructor.lua \
	98_mixedconstructor.lua \
	99_newtable_arg.lua \
	100_conditional.lua \
	101_compare.lua \
	102_conditional2.lua \
	103_closureline.lua

# tests interesting for compiler/decompiler
DECOMPILER_SRC=

# all the tests that can be run
ALL_SRC=$(NOPASS1_SRC) $(PASS1_SRC) $(PASS2_SRC) $(DECOMPILER_SRC)

# all the tests that need to be run
TEST_SRC=$(@TESTS_SRC_VAR@)

UI64_SRC_NO=
HSTRUCTURE_SRC_NO=

UI64_SRC_YES=ui64.lua
HSTRUCTURE_SRC_YES=s_constructor.lua s_len.lua s_metastruct.lua  \
	s_proxytable.lua s_self.lua s_typed_param.lua s_typedforlist.lua  \
	s_typedfornum.lua s_typedlhs.lua s_typedupval.lua

EXTRA_TESTS=
@EXTRA_TESTS_VAR@=$(UI64_SRC_@WITH_UI64@)
STRUCT_TESTS=$(HSTRUCTURE_SRC_@WITH_STRUCTURES@)

ALL_TESTS=$(TEST_SRC:.lua=@TESTSUFFIX@) $(EXTRA_TESTS:.lua=@TESTSUFFIX@)

all: prepare dummy version error $(ALL_TESTS) $(STRUCT_TESTS:.lua=.ctest1)
	@echo ----------------------------
	@echo ---------------------------- >> $(MAKELOG)
	@echo All Lua tests passed
	@echo All Lua tests passed >> $(MAKELOG)
	@echo

prepare: clean checkexpect
	@echo
	@echo Starting Lua tests...
	@echo Starting Lua tests... > $(MAKELOG)
	@echo ----------------------------
	@echo ---------------------------- >> $(MAKELOG)

checkexpect:
	@if test ! -e expect.sum; then \
		echo 'You need to generate expect.sum (run make expectsum)'; \
		exit 1; \
	fi
	@shasum -a1 -c expect.sum >/dev/null

expect:
	@if test ! -e $(GEN_EXPECT) || test ! -x $(GEN_EXPECT); then \
		echo "Nothing to do: $(GEN_EXPECT) not found"; \
		exit 1; \
	fi
	HKSCAFLAGS='$(HKSCAFLAGS)' $(GEN_EXPECT) --srcdir='$(srcdir)' --hksc='$(HKSC)'

expectsum:
	@files= ; \
	for f in $(TEST_SRC); do \
		files="$$files $(srcdir)/$$f"; \
	done; \
	shasum -a1 -U $$files > expect.sum

# for when $(TESTS) is empty
# also checks that HKSC was set properly
dummy:
	@$(HKSC) --version >/dev/null 2>&1

# check version of $(HKSC) against expected version
version:
	@echo checking \`$(HKSC) --version\` against $(HKSC_VERSION); \
	HKSC_VERSION_REGEX=`echo $(HKSC_VERSION) | sed 's/\./\\./g'`; \
	$(HKSC) --version 2>&1 | grep -iq ".*hksc[^0-9]*$$HKSC_VERSION_REGEX"

error:
	@cd $@ && $(MAKE) $(TESTMAKEFLAGS) HKSC_NAME=$(HKSC_NAME)


temp-expect:
	@for f in $(TEST_SRC) $(EXTRA_TESTS) $(STRUCT_TESTS); do \
		b=$${f%.*}; \
		src=$(srcdir)/$$f; \
		echo "Generating expect files for $$f"; \
		$(HKSC) $(HKSCAFLAGS) -s $$src -o $$b.cexpect; \
		$(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_PROFILE) $$b.profileexpect $$src; \
		$(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_DEBUG) $$b.debugexpect $$src; \
	done
	@cd programs && $(MAKE) $@ HKSC_NAME=$(HKSC_NAME)


.SUFFIXES:
.SUFFIXES: .lua .cexpect .cexpect1 .cexpect2 .ctest1 .ctest2 .profileexpect .debugexpect .ctest .dtest .p1test

# for structure tests, 'cexpect1' is the precompiled source, and 'cexpect' is
# the loaded bytecode dumped back to another file
.cexpect.ctest1:
	@echo ------------ $* ------------
	@echo ------------ $* ------------ >> $(MAKELOG)
# 	generate stripped bytecode
	@echo $(HKSC) $(HKSCAFLAGS) -s $(srcdir)/$*.lua -o $*.luac >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) -s $(srcdir)/$*.lua -o $*.luac
# 	compare code with expected
	@echo $(HKSC_CMP_CODE) $*.cexpect1 $*.luac >> $(MAKELOG)
	@ $(HKSC_CMP_CODE) $*.cexpect1 $*.luac &&  echo "$*.luac OK"
# 	redump the code and compare with the redumped expect file
# 	a separate expect file is needed because the bytecode may be changed by the
# 	loader when loading in prototypes
	@echo $(HKSC) $(HKSCBFLAGS) -s $*.luac -o $*_redumped.luac >> $(MAKELOG)
	@$(HKSC) $(HKSCBFLAGS) -s $*.luac -o $*_redumped.luac
	@echo $(HKSC_CMP_CODE) $*.cexpect $*_redumped.luac >> $(MAKELOG)
	@ $(HKSC_CMP_CODE) $*.cexpect $*_redumped.luac && echo "$*.luac redumped OK"

# compiler test + bytecode loader test
.cexpect.ctest:
	@echo ------------ $* ------------
	@echo ------------ $* ------------ >> $(MAKELOG)
# 	generate stripped bytecode
	@echo $(HKSC) $(HKSCAFLAGS) -s $(srcdir)/$*.lua -o $*.luac >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) -s $(srcdir)/$*.lua -o $*.luac
# 	generate profile info
	@echo $(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_PROFILE) $*.luaprofile \
	$(srcdir)/$*.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_PROFILE) $*.luaprofile $(srcdir)/$*.lua
# 	generate debug info
	@echo $(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_DEBUG) $*.luadebug \
	$(srcdir)/$*.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) $(HKSC_GEN_DEBUG) $*.luadebug $(srcdir)/$*.lua
# 	compare code with expected
	@echo $(HKSC_CMP_CODE) $*.cexpect $*.luac >> $(MAKELOG)
	@ $(HKSC_CMP_CODE) $*.cexpect $*.luac &&  echo "$*.luac OK"
# 	compare profile info with expected
	@echo $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile >> $(MAKELOG)
	@ $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile && \
	echo "$*.luaprofile OK"
# 	compare debug info with expected
	@echo $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug >> $(MAKELOG)
	@ $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug && echo "$*.luadebug OK"
# 	check bytecode loader by loading $*.luac and dumping it again
# 	echo the command for logs
	@echo HKSC='$(HKSC)' HKSCFLAGS='$(HKSCBFLAGS)' $(srcdir)/redump \
	--cod=$(WITH_COD_EXT) --bytecode-file=$*.luac --profile-file=$*.luaprofile \
	--debug-file=$*.luadebug >> $(MAKELOG)
# 	redump everything to check that the bytecode loader works
	@HKSC='$(HKSC)' HKSCFLAGS='$(HKSCBFLAGS)' $(srcdir)/redump \
	--cod=$(WITH_COD_EXT) --bytecode-file=$*.luac --profile-file=$*.luaprofile \
	--debug-file=$*.luadebug
# 	compare redumped code with expected
	@echo $(HKSC_CMP_CODE) $*.cexpect $*.luac >> $(MAKELOG)
	@ $(HKSC_CMP_CODE) $*.cexpect $*.luac
# 	compare redumped profile info with expected
	@echo $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile >> $(MAKELOG)
	@ $(HKSC_CMP_PROFILE) $*.profileexpect $*.luaprofile
# 	compare redumped debug info with expected
	@echo $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug >> $(MAKELOG)
	@ $(HKSC_CMP_DEBUG) $*.debugexpect $*.luadebug


# decompiler pass1 test
.ctest.p1test:
	@echo Decompiling $*.lua
	@echo $(HKSC) $(HKSCAFLAGS) -l -d $(srcdir)/$*.lua -o $*.decp1.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) -l -d $(srcdir)/$*.lua -o $*.decp1.lua > $*.decp1.log
	@diff -u $*.p1expect $*.decp1.lua && echo "$*.lua decompiled OK"


# decompiler test, run after compiler and bytecode loader tests
.ctest.dtest:
	@echo Decompiling $*.lua
# 	load source and generate a decomp for it
	@echo $(HKSC) $(HKSCAFLAGS) -d $(srcdir)/$*.lua -o $*.dec.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCAFLAGS) -l -d $(srcdir)/$*.lua -o $*.dec.lua > $*.dec.log
# 	re-compile the decomp to bytecode
	@echo $(HKSC) $(HKSCDFLAGS) -s $*.dec.lua -o $*.dec.luac >> $(MAKELOG)
	@$(HKSC) $(HKSCDFLAGS) -s $*.dec.lua -o $*.dec.luac
# 	re-generate profile info
	@echo $(HKSC) $(HKSCDFLAGS) $(HKSC_GEN_PROFILE) $*.dec.luaprofile \
	$*.dec.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCDFLAGS) $(HKSC_GEN_PROFILE) $*.dec.luaprofile $*.dec.lua
# 	re-generate debug info
	@echo $(HKSC) $(HKSCDFLAGS) $(HKSC_GEN_DEBUG) $*.dec.luadebug \
	$*.dec.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCDFLAGS) $(HKSC_GEN_DEBUG) $*.dec.luadebug $*.dec.lua
# 	compare code with expected
	@echo $(HKSC_CMP_CODE) $*.cexpect $*.dec.luac >> $(MAKELOG)
	@ $(HKSC_CMP_CODE) $*.cexpect $*.dec.luac &&  echo "$*.luac OK"
# 	compare profile info with expected
	@echo $(HKSC_CMP_PROFILE) $*.profileexpect $*.dec.luaprofile >> $(MAKELOG)
	@ $(HKSC_CMP_PROFILE) $*.profileexpect $*.dec.luaprofile && \
	echo "$*.luaprofile OK"
# 	compare debug info with expected
	@echo $(HKSC_CMP_DEBUG) $*.debugexpect $*.dec.luadebug >> $(MAKELOG)
	@ $(HKSC_CMP_DEBUG) $*.debugexpect $*.dec.luadebug && echo "$*.luadebug OK"

Makefile: $(srcdir)/Makefile.in $(top_srcdir)/configure
	@echo regenerating test/$@
	@cd $(top_builddir) && @CONFIGURE@ > /dev/null

clean:
	-@$(RM) *.luac *.luadebug *.luaprofile *.luacallstackdb *.ctest *.dtest \
	*.decp1.lua *.decp1.log
	@cd error && $(MAKE) $@
	@cd programs && $(MAKE) $@

.PHONY: test all checkexpect expectsum dummy clean version error

# (end of Makefile)

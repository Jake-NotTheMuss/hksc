# makefile for testing Lua

srcdir=@srcdir@
top_srcdir=@top_srcdir@
top_builddir=@top_builddir@

HKSC_SUPPRESS_LOGGING=@HKSC_SUPPRESS_LOGGING@
HKSC_PREFIX_MAP=@HKSC_PREFIX_MAP@
HKSC_GEN_PROFILE=@HKSC_GEN_PROFILE@
HKSC_GEN_DEBUG=@HKSC_GEN_DEBUG@
HKSC_CMP_CODE=@HKSC_CMP_CODE@
HKSC_CMP_PROFILE=@HKSC_CMP_PROFILE@
HKSC_CMP_DEBUG=@HKSC_CMP_DEBUG@

RM=@RM@

HKSC_VERSION=@HKSC_VERSION@

GAMETESTDIR=@GAMETESTDIR@

# will be set to .dtest by configure if the decompiler is enabled
# *.dtest will depend on *.ctest, so compiler tests will always be run, and then
# if the decompiler is enabled, the decompiler tests will be run
TESTSUFFIX=@TESTSUFFIX@

@VPATH_SET@

# should be set by the parent Makefile in the invokation
HKSC_NAME=

HKSC=$(top_builddir)/src/$(HKSC_NAME)

HKSCFLAGS=-L $(HKSC_SUPPRESS_LOGGING) $(HKSC_PREFIX_MAP)

# TESTS=version
TESTS= $(COMPILER_TESTS) $(DECOMPILER_TESTS)

TESTMAKEFLAGS=

MAKELOG=./tests.log

# no need to list 2 games that have the same compatibility settings, i.e., if
# game X and game Y both have the same compatilbility settings, only use game X
# for tests; the one exception to this is Call of Duty, which has all features
# disabled for T6 and T7, but T7 generates different code than T6 because it has
# additional opcodes for bitwise operations
ALL_GAMEDIRS=codt6 codt7

test: Makefile
	@$(MAKE) -s clean
	@echo Starting tests > $(MAKELOG)
	@tests= ; \
	for f in "$(srcdir)"/[0-9][0-9]_?*.lua; do \
	f=`basename "$$f"`; \
	tests="$$tests $${f%.lua}$(TESTSUFFIX)"; \
	done; \
	$(MAKE) $(TESTMAKEFLAGS) all ALL_TESTS="$$tests"

all: dummy version error $(ALL_TESTS)

# for when $(TESTS) is empty
# also checks that HKSC was set properly
dummy:
	@ if $(HKSC) --version >/dev/null 2>&1; then \
		echo "using HKSC=$(HKSC)"; \
	else \
		echo "Invalid program name HKSC=$(HKSC)"; exit 1; \
	fi

# check version of $(HKSC) against expected version
version:
	@echo checking \`$(HKSC) --version\` against $(HKSC_VERSION); \
	HKSC_VERSION_REGEX=`echo $(HKSC_VERSION) | sed 's/\./\\./g'`; \
	$(HKSC) --version | grep -iq ".*hksc[^0-9]*$$HKSC_VERSION_REGEX"

error:
	@cd $@ && $(MAKE) $(TESTMAKEFLAGS) HKSC_NAME=$(HKSC_NAME)

.SUFFIXES:
.SUFFIXES: .lua .cexpect .profileexpect .debugexpect .ctest .dtest

# .lua.luac:
# 	$(HKSC) --compile -s $< -o $@

# .lua.cexpect:
# 	@echo You need to regenerate $@!; false
# .lua.profileexpect:
# 	@echo You need to regenerate $@!; false
# .lua.debugexpect:
# 	@echo You need to regenerate $@!; false

# .profileexpect.ctest:
# 	@:
# .debugexpect.ctest:
# 	@:

# compiler test
.cexpect.ctest:
	@echo ------------ $* ------------ | tee -a $(MAKELOG)
# 	generate stripped bytecode
	@echo $(HKSC) $(HKSCFLAGS) -s $(srcdir)/$*.lua -o $*.luac >> $(MAKELOG)
	@$(HKSC) $(HKSCFLAGS) -s $(srcdir)/$*.lua -o $*.luac
# 	generate profile info
	@echo $(HKSC) $(HKSCFLAGS) $(HKSC_GEN_PROFILE) $*.luaprofile \
	$(srcdir)/$*.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCFLAGS) $(HKSC_GEN_PROFILE) $*.luaprofile $(srcdir)/$*.lua
# 	generate debug info
	@echo $(HKSC) $(HKSCFLAGS) $(HKSC_GEN_DEBUG) $*.luadebug \
	$(srcdir)/$*.lua >> $(MAKELOG)
	@$(HKSC) $(HKSCFLAGS) $(HKSC_GEN_DEBUG) $*.luadebug $(srcdir)/$*.lua
# 	compare code with expected
	@echo $(HKSC_CMP_CODE) $(GAMETESTDIR)/$*.cexpect $*.luac >> $(MAKELOG)
	@ if $(HKSC_CMP_CODE) $(GAMETESTDIR)/$*.cexpect $*.luac; then \
	echo "$*.luac OK"; fi
# 	compare profile info with expected
	@echo $(HKSC_CMP_PROFILE) -u $(GAMETESTDIR)/$*.profileexpect $*.luaprofile \
	>> $(MAKELOG)
	@ if $(HKSC_CMP_PROFILE) -u $(GAMETESTDIR)/$*.profileexpect $*.luaprofile; \
	then echo "$*.luacallstackdb OK"; fi
# 	compare debug info with expected
	@echo $(HKSC_CMP_DEBUG) $(GAMETESTDIR)/$*.debugexpect $*.luadebug \
	>> $(MAKELOG)
	@ if $(HKSC_CMP_DEBUG) $(GAMETESTDIR)/$*.debugexpect $*.luadebug; \
	then echo "$*.luadebug OK"; fi

# decompiler test
.ctest.dtest:
	@: echo hello $@

Makefile: $(srcdir)/Makefile.in $(top_srcdir)/configure
	@echo regenerating test/$@
	@cd $(top_builddir) && @CONFIGURE@ > /dev/null

clean: Makefile
	-@$(RM) *.luac *.luadebug *.luacallstackdb *.ctest *.dtest
	@cd error && $(MAKE) $@

.PHONY: test all dummy clean version error

# (end of Makefile)

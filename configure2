#!/bin/sh
# libhksc configure script

SRCDIR=${0%configure2}
SRCDIR=${SRCDIR%/}
if test "x$SRCDIR" = x || test "x$SRCDIR" = x.; then
	SRCDIR=`pwd`
fi

config_h="$SRCDIR/src/hkscconf.h"
lua_h="$SRCDIR/src/hksclua.h"

hksc_pc="$SRCDIR/libhksc.pc"

VER=`sed -n -e '/HKSC_VERSION "/s/.*"\(.*\)".*/\1/p' < "$lua_h"`
VER3=`echo $VER | cut -d. -f 1-3`
VER2=`echo $VER | cut -d. -f 1-2`
VER1=`echo $VER | cut -d. -f 1-1`

show_help()
{
	cat <<EOF
Usage: $0 [options]

Standard Options:
  --help                   Print this message and exit
  --reset                  Reset configuration to default settings
  --prefix=PREFIX          Install in PREFIX
  --eprefix=EPREFIX        Install architecture-dependent files in EPREFIX
  --bindir=DIR             Install binaries in DIR
  --libdir=DIR             Install libraries in DIR
  --sharedlibdir=DIR       Install shared libraries in DIR
  --includedir=DIR         Install C headers in DIR
  --sharedir=DIR           Root documentation DIR
  --docdir=DIR             Install documentation in DIR
  --mandir=DIR             Install man pages in DIR

Havok Script Compatibility Options:
  --game=GAME              Configure compability settings for GAME
                           Supported values and their corresponding titles:
                             codt6
                             codt7

Lua/Hksc Options:
  --with-decompiler        Lua decompiler (enabled by default)
  --no-decompiler          Disable Lua decompiler
  --emu-ui64               Use C structs to emulate UI64 (disabled by default)
  --no-emu-ui64            Disable using C structs to emulate UI64
  --with-logging           Enable logging information and warning messages
  --disable-logging        Disable logging (deault)
  --                       Stop handling options

Advanced Options:
  --release                Build a release binary
  --debug                  Build a debug binary

Developer Options:
  --debug-pass=NUMBER      Debug decompiler pass NUMBER [1-2]
EOF
	exit $1
}

error()
{
	echo $0: error: $*
	exit ${1-1}
}

warn()
{
	echo $0: warning: $*
}

emu_ui64=0
with_decompiler=1
with_logging=0
debug=1
debug_pass=

for opt; do
	eval opt=\"$opt\"
	case "$opt" in
		-h|--help) show_help ;;
		--prefix=*) prefix=${opt#*=} ;;
		--exec-prefix=*|--eprefix=*) exec_prefix=${opt#*=} ;;
		--bindir=*) bindir=${opt#*=} ;;
		--libdir=*) libdir=${opt#*=} ;;
		--sharedlibdir=*) sharedlibdir=${opt#*=} ;;
		--includedir=*) includedir=${opt#*=} ;;
		--sharedir=*) sharedir=${opt#*=} ;;
		--docdir=*) docdir=${opt#*=} ;;
		--mandir=*) mandir=${opt#*=} ;;
		--game=*) game=${opt#*=} ;;
		--with-decompiler) with_decompiler=1 ;;
		--no-decompiler) with_decompiler=0 ;;
		--emu-ui64) emu_ui64=1 ;;
		--no-emu-ui64) emu_ui64=0 ;;
		--with-logging) with_logging=1 ;;
		--disable-logging) with_logging=0 ;;
		--debug) debug=1 ;;
		--release) debug=0 ;;
		--debug-pass=*) debug_pass=${opt#*=} ;;
		*) echo "Unrecongnized option '$opt'"
	esac
done

# shared library extension
case `(uname -s || echo unknown) 2>/dev/null` in
	Darwin* | darwin*)
		LIBSUF='.a'
		DLLSUF='.dylib'
		LINK_LIBHKSC='$(LINK_LIBHKSC_DYLIB)' ;;
	Windows_NT|MINGW*|mingw*|CYGWIN*|Cygwin*|cygwin*)
		prefix='C:/Program Files/hksc'
		AR='$(CC) -shared -o'
		RANLIB='strip --strip-unneeded'
		CC=gcc
		CFLAGS="$CFLAGS -DLUA_BUILD_AS_DLL"
		LIBSUF='.lib'
		DLLSUF='.dll'
		EXESUF='.exe'
		LINK_LIBHKSC='$(LINK_LIBHKSC_DLL)' ;;
	*)
		LIBSUF='.a'
		DLLSUF='.so'
		LINK_LIBHKSC='$(LINK_LIBHKSC_SO)' ;;
esac

prefix=${prefix-/usr/local}
exec_prefix=${exec_prefix-$prefix}
bindir=${bindir-$exec_prefix/bin}
libdir=${libdir-$exec_prefix/lib}
sharedlibdir=${sharedlibdir-$libdir}
includedir=${includedir-$prefix/include}
sharedir=${sharedir-$prefix/share}
docdir=${docdir-$sharedir/doc/libhksc}
mandir=${mandir-$sharedir/man}
pkgconfigdir=$libdir/pkgconfig

case "$debug_pass" in
	"") debug_pass=0 ;;
	[0-2]) ;;
	*) error "Invalid value for --debug-pass '$debug_pass'" ;;
esac

case "$game" in
	"")
		echo "Configuring compatibility settings for 'codt7' by default"
		game=codt7; lua_cod=1; lua_codt7=1 ;;
	codt6) lua_cod=1; lua_codt7=0 ;;
	codt7) lua_cod=1; lua_codt7=1 ;;
	cod*)
		warn "changing supplied game value '$game' to 'codt6'"
		game=codt6; lua_cod=1; lua_codt7=0 ;;
	*) lua_cod=0; lua_codt7=0 ;;
esac

# configure compatibility settings based on the build config type
case "$game" in
	codt6|codt7)
		STRUCTURE_EXTENSION_ON=0
		WITHNATIVEINT=0
		WITHDOUBLES=0
		SELF=0
		GETGLOBAL_MEMOIZATION=0
		;;
	*) error "Unsupported game '$game'" ;;
esac

rm -f "$SRCDIR"/test/*.cexpect "$SRCDIR"/test/*.profileexpect \
"$SRCDIR"/test/*.debugexpect

# update expect files to point to the correct game directory
ln -s "$SRCDIR/test/$game"/*.cexpect "$SRCDIR/test/$game"/*.profileexpect \
"$SRCDIR/test/$game"/*.debugexpect "$SRCDIR/test"

exit

# configure header
sed < "$config_h.in" "
s/@LUACONFIG_EMU_UI64@/$emu_ui64/g
s/@LUACONFIG_DECOMPILER@/$with_decompiler/g
s/@LUACONFIG_LOGGING@/$with_logging/g
s/@LUACONFIG_COD@/$lua_cod/g
s/@LUACONFIG_CODT7@/$lua_codt7/g
s/@HKSC_GETGLOBAL_MEMOIZATION@/$GETGLOBAL_MEMOIZATION/g
s/@HKSC_STRUCTURE_EXTENSION_ON@/$STRUCTURE_EXTENSION_ON/g
s/@HKSC_SELF@/$SELF/g
s/@HKSC_WITHNATIVEINT@/$WITHNATIVEINT/g
s/@HKSC_WITHDOUBLES@/$WITHDOUBLES/g
s/@HKSC_DEBUG_PASS@/$debug_pass/g
" > "$config_h"

# configure pc
sed < "$hksc_pc.in" "
s/@prefix@/$prefix/g
s/@exec_prefix@/$exec_prefix/g
s/@libdir@/$libdir/g
s/@sharedlibdir@/$sharedlibdir/g
s/@includedir@/$includedir/g
s/@HKSC_VERSION@/$VER/g
" > "$hksc_pc"

set10()
{
	eval val=\$$1
	if test "x$val" = x0; then
		eval $2=$4
	else
		eval $2=$3
	fi
}

# set which flag is needed to suppress log output
set10 with_logging HKSC_SUPPRESS_LOGGING --logfile=/dev/null
# set build compiler flags for debug or release builds
set10 debug BUILDCONFIGFLAGS '$(TESTS)' '$(RELEASE)'
# set which tests to include based on whether the decompiler is enabled
set10 with_decompiler TESTSUFFIX .dtest .ctest
# set which error tests to do for compatibility features
set10 STRUCTURE_EXTENSION_ON HSTRUCTURE_ERROR_TESTS yeshstructure nohstructure
# flags for generating Lua profiling info
set10 lua_cod GEN_PROFILE \
"-o /dev/null --debugfile /dev/null --callstackdb" "-s=p -o"
# flags for generating Lua debug info
set10 lua_cod GEN_DEBUG \
"-o /dev/null --callstackdb /dev/null --debugfile" "-s=n -o"

# generate config.mak
cat >config.mak <<EOF
# Automatically generated by configure
prefix=\$(DESTDIR)$prefix
exec_prefix=\$(DESTDIR)$exec_prefix
bindir=\$(DESTDIR)$bindir
libdir=\$(DESTDIR)$libdir
sharedlibdir=\$(DESTDIR)$sharedlibdir
includedir=\$(DESTDIR)$includedir
sharedir=\$(DESTDIR)$sharedir
docdir=\$(DESTDIR)$docdir
mandir=\$(DESTDIR)$mandir
pkgconfigdir=\$(DESTDIR)$pkgconfigdir
GAMEDIR=$game
SRCDIR=\$(TOP:..=../)src
CC=${CC-cc}
AR=${AR-ar rcu}
RANLIB=${RANLIB-ranlib}
CP=${CP-cp -p}
RM=${RM-rm -f}
FIND=${FIND-find}
INSTALL=${INSTALL-install}
MKDIR=${MKDIR-mkdir}
CFLAGS=$CFLAGS \$(BUILDCONFIGFLAGS)
LDFLAGS=$LDFLAGS
LIBSUF=$LIBSUF
DLLSUF=$DLLSUF
EXESUF=$EXESUF
STATICLIB=libhksc\$(LIBSUF)
SHAREDLIB=libhksc\$(DLLSUF)
LINK_LIBHKSC=$LINK_LIBHKSC
HKSC_T=hksc\$(EXESUF)
HKSC_SH=hkscsh\$(EXESUF)
HKSC_VERSION=$VER
HKSC_SUPPRESS_LOGGING=$HKSC_SUPPRESS_LOGGING
BUILDCONFIGFLAGS=$BUILDCONFIGFLAGS
HSTRUCTURE_ERROR_TESTS=$HSTRUCTURE_ERROR_TESTS
HKSC_T=libhksc\$(LIBSUF)
HKSC_SH=libhksc\$
GEN_PROFILE=$GEN_PROFILE
GEN_DEBUG=$GEN_DEBUG
EOF



logvar()
{
	eval echo $1=\$$1
}

logvar prefix
logvar exec_prefix
logvar bindir
logvar libdir
logvar sharedlibdir
logvar includedir
logvar sharedir
logvar docdir
logvar mandir
logvar pkgconfigdir
logvar emu_ui64
logvar with_decompiler
logvar with_logging
logvar debug
logvar debug_pass

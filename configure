#!/bin/sh
# libhksc configure script


SRCDIR=`dirname "$0"`
if test "x$SRCDIR" = x.; then
	SRCDIR=
	in_source=yes
else
	SRCDIR="$SRCDIR/"
	in_source=no
fi

config_status=config.status

config_h=src/hkscconf.h
config_h_TMP=hkscconf-$$.h
lua_h="${SRCDIR}src/hksclua.h"

show_help()
{
	cat <<EOF
Usage: $0 [options]

Standard Options:
  --help                   Print this message and exit
  --reset                  Reset configuration to default settings
  --prefix=PREFIX          Install in PREFIX
  --eprefix=EPREFIX        Install architecture-dependent files in EPREFIX
  --bindir=DIR             Install binaries in DIR
  --libdir=DIR             Install libraries in DIR
  --sharedlibdir=DIR       Install shared libraries in DIR
  --includedir=DIR         Install C headers in DIR
  --sharedir=DIR           Root documentation DIR
  --docdir=DIR             Install documentation in DIR
  --mandir=DIR             Install man pages in DIR

Havok Script Compatibility Options:
  --game=GAME              Configure compability settings for GAME
                           Supported values and their corresponding titles:
                             codt6
                             codt7

Lua/Hksc Options:
  --with-decompiler        Lua decompiler (enabled by default)
  --no-decompiler          Disable Lua decompiler
  --emu-ui64               Use C structs to emulate UI64 (disabled by default)
  --no-emu-ui64            Disable using C structs to emulate UI64
  --with-logging           Enable logging information and warning messages
  --disable-logging        Disable logging (deault)
  --                       Stop handling options

Advanced Options:
  --release                Build a release binary
  --debug                  Build a debug binary

Developer Options:
  --debug-pass=NUMBER      Debug decompiler pass NUMBER [1-2]
EOF
	exit $1
}

error()
{
	echo $0: error: $*
	exit ${1-1}
}

warn()
{
	echo $0: warning: $*
}

nl='
'
case $SRCDIR in
	*[\\\"\#\$\&\'\`$nl\ \	]*)
	error "unsafe SRCDIR value: '$SRCDIR'" ;;
esac


if test "x$in_source" = xno; then
  # test to see if SRCDIR already configured
  if test -f ${SRCDIR}src/hkscconf.h; then
    error \
    "source directory already configured; run \"make distclean\" there first"
  fi
fi


VER=`sed -n -e '/HKSC_VERSION "/s/.*"\(.*\)".*/\1/p' < $lua_h`
VER3=`echo $VER | cut -d. -f 1-3`
VER2=`echo $VER | cut -d. -f 1-2`
VER1=`echo $VER | cut -d. -f 1-1`

emu_ui64=0
with_decompiler=1
with_logging=0
debug=0
debug_pass=

test -e "$config_status" && . "$config_status"

for opt; do
	eval opt=\"$opt\"
	case $opt in
		-h|--help) show_help ;;
		--prefix=*) prefix=${opt#*=} ;;
		--exec-prefix=*|--eprefix=*) exec_prefix=${opt#*=} ;;
		--bindir=*) bindir=${opt#*=} ;;
		--libdir=*) libdir=${opt#*=} ;;
		--sharedlibdir=*) sharedlibdir=${opt#*=} ;;
		--includedir=*) includedir=${opt#*=} ;;
		--sharedir=*) sharedir=${opt#*=} ;;
		--docdir=*) docdir=${opt#*=} ;;
		--mandir=*) mandir=${opt#*=} ;;
		--game=*) game=${opt#*=} ;;
		--with-decompiler) with_decompiler=1 ;;
		--no-decompiler) with_decompiler=0 ;;
		--emu-ui64) emu_ui64=1 ;;
		--no-emu-ui64) emu_ui64=0 ;;
		--with-logging) with_logging=1 ;;
		--disable-logging) with_logging=0 ;;
		--debug) debug=1 ;;
		--release) debug=0 ;;
		--debug-pass=*) debug_pass=${opt#*=} ;;
		*) echo "Unrecongnized option '$opt'"
	esac
done

# shared library extension
case `(uname -s || echo unknown) 2>/dev/null` in
	Darwin* | darwin*)
		LIBSUF='.a'
		DLLSUF='.dylib'
		EXESUF=
		LINK_LIBHKSC_TYPE=DYLIB ;;
	Windows_NT|MINGW*|mingw*|CYGWIN*|Cygwin*|cygwin*)
		prefix=${prefix-'C:/Program Files/hksc'}
		AR=${AR-'$(CC) -shared -o'}
		RANLIB=${RANLIB-'strip --strip-unneeded'}
		CC=${CC-gcc}
		CFLAGS="$CFLAGS -DLUA_BUILD_AS_DLL"
		LIBSUF='.lib'
		DLLSUF='.dll'
		EXESUF='.exe'
		LINK_LIBHKSC_TYPE=DLL ;;
	*)
		LIBSUF='.a'
		DLLSUF='.so'
		EXESUF=
		LINK_LIBHKSC_TYPE=SO ;;
esac

prefix=${prefix-/usr/local}
exec_prefix=${exec_prefix-$prefix}
bindir=${bindir-$exec_prefix/bin}
libdir=${libdir-$exec_prefix/lib}
sharedlibdir=${sharedlibdir-$libdir}
includedir=${includedir-$prefix/include}
sharedir=${sharedir-$prefix/share}
docdir=${docdir-$sharedir/doc/libhksc}
mandir=${mandir-$sharedir/man}
pkgconfigdir=$libdir/pkgconfig

CC=${CC-cc}
AR=${AR-ar rcu}
RANLIB=${RANLIB-ranlib}
CP=${CP-cp -p}
RM=${RM-rm -f}
FIND=${FIND-find}
INSTALL=${INSTALL-install}
MKDIR=${MKDIR-mkdir}
LIBS=

# Check all directory arguments for consistency.
for var in prefix exec_prefix bindir libdir sharedlibdir includedir sharedir \
docdir mandir pkgconfigdir; do
	eval val=\$$var
	# Remove trailing slashes.
	case $val in
	*/ )
		val=`expr "X$val" : 'X\(.*[^/]\)' \| "X$val" : 'X\(.*\)'`
		eval $var=\$val;;
	esac
	# Be sure to have absolute directory names.
	case $val in
	[\\/$]* | ?:[\\/]* )  continue;;
	'' ) case $var in *prefix ) continue;; esac;;
	esac
	error "expected an absolute directory name for --$var: $val"
done

case $debug_pass in
	"") debug_pass=0 ;;
	[0-2]) ;;
	*) error "Invalid value for --debug-pass '$debug_pass'" ;;
esac

case $game in
	"")
		echo "Configuring compatibility settings for 'codt7' by default"
		game=codt7; lua_cod=1; lua_codt7=1 ;;
	codt6) lua_cod=1; lua_codt7=0 ;;
	codt7) lua_cod=1; lua_codt7=1 ;;
	cod*)
		warn "changing supplied game value '$game' to 'codt6'"
		game=codt6; lua_cod=1; lua_codt7=0 ;;
	*) lua_cod=0; lua_codt7=0 ;;
esac

# configure compatibility settings based on the build config type
case $game in
	codt6|codt7)
		STRUCTURE_EXTENSION_ON=0
		WITHNATIVEINT=0
		WITHDOUBLES=0
		SELF=0
		GETGLOBAL_MEMOIZATION=0
		;;
	*) error "Unsupported game '$game'" ;;
esac

yesno()
{
	eval "case \$$1 in 0|'') echo NO ;; *) echo YES ;; esac"
}

cat <<EOF
Configuration set for $game
    STRUCTURE_EXTENSION_ON              `yesno STRUCTURE_EXTENSION_ON`
    WITHNATIVEINT                       `yesno WITHNATIVEINT`
    WITHDOUBLES                         `yesno WITHDOUBLES`
    SELF                                `yesno SELF`
    GETGLOBAL_MEMOIZATION               `yesno GETGLOBAL_MEMOIZATION`
EOF

# set a Makefile variable based on the value of a configure variable
# set10 [confvarname] [makevarname] [valiftrue] [valiffalse]
set10()
{
	eval val=\$$1
	if test "x$val" = x0; then
		eval "$2='$4'"
	else
		eval "$2='$3'"
	fi
}

# set which flag is needed to suppress log output
set10 with_logging HKSC_SUPPRESS_LOGGING --logfile=/dev/null
# set build compiler flags for debug or release builds
set10 debug BUILDCONFIGTYPE TESTS RELEASE
# set which tests to include based on whether the decompiler is enabled
set10 with_decompiler TESTSUFFIX .dtest .ctest
# set which error tests to do for compatibility features
set10 STRUCTURE_EXTENSION_ON HSTRUCTURE_ERROR_CHECK yeshstructure nohstructure
# flags for generating Lua profiling info
# for the COD build, suppress bytecode output and only generate a callstackdb
# for non-COD, use profile stripping mode
set10 lua_cod HKSC_GEN_PROFILE \
"-o /dev/null --debugfile /dev/null --callstackdb" "-s=p -o"
# flags for generating Lua debug info
# for the COD build, suppress bytecode output and only generate a debug file
# for non-COD, use debug stripping mode
set10 lua_cod HKSC_GEN_DEBUG \
"-o /dev/null --callstackdb /dev/null --debugfile" "-s=n -o"
# command for comparing profiling info
# use diff for COD profile info because it is printed as text
# otherwise use cmp to compare binary files
set10 lua_cod HKSC_CMP_PROFILE "diff -u" "cmp -bl"
HKSC_CMP_CODE="cmp -bl"
HKSC_CMP_DEBUG="cmp -bl"


# Update config.status
echo '# Automatically generated by configure' > "$config_status"

printvar()
{
	eval echo $1=\$$1
}

logvar()
{
	eval echo $1=\$$1 | tee -a "$config_status"
}

# install paths
logvar prefix
logvar exec_prefix
logvar bindir
logvar libdir
logvar sharedlibdir
logvar includedir
logvar sharedir
logvar docdir
logvar mandir
logvar pkgconfigdir

# preprocessor defs
logvar emu_ui64
logvar with_decompiler
logvar with_logging
logvar debug
logvar debug_pass

# Havok Script configuration
logvar game
logvar lua_cod
logvar lua_codt7
logvar GETGLOBAL_MEMOIZATION
logvar STRUCTURE_EXTENSION_ON
logvar SELF
logvar WITHNATIVEINT
logvar WITHDOUBLES

printvar CC
printvar CFLAGS
printvar LDFLAGS

# generate files
if test "x$in_source" = xno; then
	for d in src test test/error; do
		test -d $d || mkdir $d
	done
fi

# sets the following variables
# $top_builddir_sub  - the path to the build tree root from $dir_suffix
# $top_build_prefix  - path to the build tree root
# $srcdir  - the path to the source tree subdirectory $dir_suffix
# $top_srcdir  - the path to the source tree root
srcdirfromdir()
{
	# set dir_suffix
	dir_suffix=$1
	# set top_builddir_sub
	# ../ for each directory in dir_suffix
	top_builddir_sub=`printf "%s\n" "/$1" | sed 's|/[^\\/]*|/..|g;s|/||'`
	case $top_builddir_sub in
		"") top_build_prefix= ;;
		*) top_build_prefix=$top_builddir_sub/ ;;
	esac
	top_builddir=$top_build_prefix
	case $SRCDIR in
		"") # in-source build
			srcdir=
			top_srcdir=$top_builddir_sub ;;
		[\\/]* | ?:[\\/]* )  # Absolute name.
			srcdir=$SRCDIR$dir_suffix
			top_srcdir=$SRCDIR ;;
		*) # Relative name.
			srcdir=$top_build_prefix$SRCDIR$dir_suffix
			top_srcdir=$top_build_prefix$SRCDIR ;;
	esac
}

fn_set_vpath()
{
	VPATH_SET="VPATH=$srcdir"
}

fn_clear_vpath()
{
	VPATH_SET=
}

if test "x$in_source" = xno; then
	set_vpath=fn_set_vpath
	doing_what_src='building'
	doing_what_test='testing'
	doing_what_test_error='error-checking'
	CFLAGS="$CFLAGS -I\$(top_builddir)src"
else
	# omit an empty VPATH assignment
	set_vpath=fn_clear_vpath
	doing_what_src=
	doing_what_test=
	doing_what_test_error=
fi

config_makefile()
{
	for f; do
		case $f in
			*/*)
				dir_suffix=${f%/*}
				dir_varstem=`printf "%s\n" "$dir_suffix" | tr / _`
				eval doing_what=\${doing_what_$dir_varstem} ;;
			*)
				dir_suffix=
				doing_what= ;;
		esac
		srcdirfromdir "$dir_suffix"
		$set_vpath
		test "x$doing_what" != x && echo Using VPATH=$srcdir for $doing_what Lua
		# note the absence of ;t t at the end of each line - it is not needed
		sed < "${SRCDIR}$f.in" -e "
			s&@prefix@&$prefix&
			s&@exec_prefix@&$exec_prefix&
			s&@bindir@&$bindir&
			s&@libdir@&$libdir&
			s&@sharedlibdir@&$sharedlibdir&
			s&@includedir@&$includedir&
			s&@sharedir@&$sharedir&
			s&@docdir@&$docdir&
			s&@mandir@&$mandir&
			s&@pkgconfigdir@&$pkgconfigdir&
			s&@CC@&$CC&
			s&@AR@&$AR&
			s&@RANLIB@&$RANLIB&
			s&@CP@&$CP&
			s&@RM@&$RM&
			s&@FIND@&$FIND&
			s&@INSTALL@&$INSTALL&
			s&@MKDIR@&$MKDIR&
			s&@CFLAGS@&$CFLAGS&
			s&@LDFLAGS@&$LDFLAGS&
			s&@LIBS@&$LIBS&
			s&@LIBSUF@&$LIBSUF&
			s&@DLLSUF@&$DLLSUF&
			s&@EXESUF@&$EXESUF&
			s&@STATICLIB@&libhksc\$(LIBSUF)&
			s&@SHAREDLIB@&libhksc\$(DLLSUF)&
			s&@HKSC_T@&hksc\$(EXESUF)&
			s&@HKSC_SH@&hkscsh\$(EXESUF)&
			s&@HKSC_VERSION@&$VER&
			s&@HKSC_VERSION3@&$VER3&
			s&@HKSC_VERSION2@&$VER2&
			s&@HKSC_VERSION1@&$VER1&
			s&@VPATH_SET@&$VPATH_SET&
			s&@GAMETESTDIR@&$GAMETESTDIR&
			s&@HSTRUCTURE_ERROR_CHECK@&$HSTRUCTURE_ERROR_CHECK&
			s&@HKSC_HKSC_GEN_PROFILE@&$HKSC_HKSC_GEN_PROFILE&
			s&@HKSC_HKSC_GEN_DEBUG@&$HKSC_HKSC_GEN_DEBUG&
			s&@HKSC_GEN_CODE@&$HKSC_GEN_CODE&
			s&@TESTSUFFIX@&$TESTSUFFIX&
			s&@BUILDCONFIGTYPE@&$BUILDCONFIGTYPE&
			s&@srcdir@&$srcdir&
			s&@top_srcdir@&$top_srcdir&
			s&@top_builddir@&$top_builddir&
			s&@LINK_LIBHKSC_TYPE@&$LINK_LIBHKSC_TYPE&
			s&@HKSC_SUPPRESS_LOGGING@&$HKSC_SUPPRESS_LOGGING&
		" > $f
	done
}

config_makefile Makefile src/Makefile test/Makefile test/error/Makefile

# configure pc
sed < "${SRCDIR}libhksc.pc.in" "
s&@prefix@&$prefix&g
s&@exec_prefix@&$exec_prefix&g
s&@libdir@&$libdir&g
s&@sharedlibdir@&$sharedlibdir&g
s&@includedir@&$includedir&g
s&@HKSC_VERSION@&$VER&g
" > libhksc.pc

# configure header
sed < "${SRCDIR}$config_h.in" "
s/@LUACONFIG_EMU_UI64@/$emu_ui64/g
s/@LUACONFIG_DECOMPILER@/$with_decompiler/g
s/@LUACONFIG_LOGGING@/$with_logging/g
s/@LUACONFIG_COD@/$lua_cod/g
s/@LUACONFIG_CODT7@/$lua_codt7/g
s/@HKSC_GETGLOBAL_MEMOIZATION@/$GETGLOBAL_MEMOIZATION/g
s/@HKSC_STRUCTURE_EXTENSION_ON@/$STRUCTURE_EXTENSION_ON/g
s/@HKSC_SELF@/$SELF/g
s/@HKSC_WITHNATIVEINT@/$WITHNATIVEINT/g
s/@HKSC_WITHDOUBLES@/$WITHDOUBLES/g
s/@HKSC_DEBUG_PASS@/$debug_pass/g
" > "$config_h_TMP"

if diff "$config_h_TMP" "$config_h" >/dev/null 2>&1; then
	echo "$config_h is unchanged"
else
	mv -f "$config_h_TMP" "$config_h"
fi

rm -f "$config_h_TMP"

# ---------------------------------------------------------------------------

Status for Havok Script decompiler
==================================

The decompiler's development started around November of 2022. It has
gone through a few redesigns over time while the general approach has
remained the same, that approach being to do 2 passes on the bytecode,
generating block information in the first pass, and then doing symbolic
execution and dumping output in the second pass.

The current implementation is still flawed. It passes all unit tests,
and can decompile all but one of the test programs without crashing, but
one test program exposed a flaw in the first pass. The file is located
in test/programs/intlimit.lua. It contains a while-loop which contains
an if-else-statement. The else-part begins with a break-statement. Thus,
the if-part exit targets the break, allowing the exit to be optimized to
target the break label of the loop. This results in the if-part
condition looking like the while-loop condition.

There should never be statements or new local variables within a
while-loop condition. But before an if-statement, those things are
perfectly valid to exist. Therefore, if there are statements before the
if-part, the decompiler should not mistake it as a while-loop condition.

The new implementation I am working on will address this as well as
another minor flaw that I found in the first pass, having to do with
optimized exit labels from a loop. To be brief, a loop can have break
statements that target a different label than the one targeted by jumps
in the loop condition. This happens when there is a conditional
expression after the loop whose first operand is a literal boolean
value. The break will target one of the bool labels generated by the
expression, while the loop condition will exit to the instruction after
the bool labels. This has to do with a bug in Lua that was fixed in
5.1.5. The bug was caused by Lua handling literal booleans that would
cause a jump in conditional expression different than other values. In
5.1.5, testing against false in an if-statement would generate code that
loads false, then tests it, rather than unconditionally jumping.

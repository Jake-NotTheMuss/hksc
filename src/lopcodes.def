/* -*- Mode: C -*- */
/*
** $Id: lopcodes.def $
** Define all opcodes here
** Before including this file, define the macro DEFCODE
** See Copyright Notice in lua.h
*/

/*
** #define DEFCODE(name, mode, test, useRA, bmode, cmode, makeR1, useR1, r1)
**   <name> is the name of the operation, e.g. GETFIELD
**   <mode> is the mode of the operation (ABC, ABx, or AsBx)
**   <test> is 1 if the operation is a test, 0 otherwise
**   <useRA> is 1 if the operation uses argument A as a register, 0 otherwise
**   <bmode> is the mode of argument B (see lopcodes.h)
**   <cmode> is the mode of argument C
**   <makeR1> is 1 if the operation requires the next to be R1 in non-shared
**   states
**   <useR1> is the R1 mode of the operation (for R1 versions, see lopcodes.h)
**   <r1> is the R1 version of the operation (OP_MAX if there is none)
*/


/*
** extra macros for convenience
*/

/* use DEFCODE_R1 for codes with R1 versions - omit R1 mode and R1 version */
#ifndef DEFCODE_R1
# define DEFCODE_R1(n,m,t,a,b,c,mr1) \
  DEFCODE(n,m,t,a,b,c,mr1,NR1,OP_##n##_R1)
#endif /* DEFCODE_R1 */

/* use DEFCODE_R1V for R1 versions of codes - omit R1 version */
#ifndef DEFCODE_R1V
#define DEFCODE_R1V(n,m,t,a,b,c,mr1,ur1) \
  DEFCODE(n,m,t,a,b,c,mr1,ur1,OP_MAX)
#endif /* DEFCODE_R1V */

/* use DEFCODE1 for codes without R1 versions - omit R1 mode and R1 version */
#ifndef DEFCODE1
# define DEFCODE1(n,m,t,a,b,c,mr1) \
  DEFCODE(n,m,t,a,b,c,mr1,NR1,OP_MAX)
#endif /* DEFCODE1 */

/*
** R(x) - register
** Kst(x) - constant (in constant table)
** RK(x) == if ISK(x) then Kst(INDEXK(x)) else R(x)
*/


/*----------------------------------------------------------------------
name    args  description
------------------------------------------------------------------------*/
/* OP_GETFIELD   A B C  R(A) := R(B)[Kst(C)] */
DEFCODE_R1(GETFIELD, ABC, 0, 1, R, K, 1)

/* OP_TEST  A C  if not (R(A) <=> C) then pc++ */
DEFCODE_R1(TEST, ABC, 1, 1, N, U, 0)

/* OP_CALL Lua/C function variants */
DEFCODE_R1(CALL_I, ABC, 0, 1, U, U, 0)
DEFCODE1(CALL_C, ABC, 0, 1, U, U, 0)

/* OP_EQ  A B C  if ((RK(B) == RK(C)) ~= A) then pc++ */
DEFCODE1(EQ, ABC, 1, 0, RK, RK, 0)
DEFCODE1(EQ_BK, ABC, 1, 0, RK, RK, 0)

/* OP_GETGLOBAL  A Bx  R(A) := Gbl[Kst(Bx)] */
DEFCODE1(GETGLOBAL, ABx, 0, 1, K, N, 1)

/* OP_MOVE  A B  R(A) := R(B) */
DEFCODE1(MOVE, ABC, 0, 1, R, N, 1)

/* OP_SELF  A B C  R(A+1) := R(B); R(A) := R(B)[RK(C)] */
DEFCODE1(SELF, ABC, 0, 1, R, RK, 1)

/* OP_RETURN  A B  return R(A), ... ,R(A+B-2)  (see note) */
DEFCODE1(RETURN, ABC, 0, 1, U, N, 0)

/* OP_GETTABLE  A B C  R(A) := R(B)[RK(C)] */
DEFCODE1(GETTABLE_S, ABC, 0, 1, R, RK, 0)
DEFCODE1(GETTABLE_N, ABC, 0, 1, R, RK, 0)
DEFCODE1(GETTABLE, ABC, 0, 1, R, RK, 0)

/* OP_LOADBOOL  A B C  R(A) := (Bool)B; if (C) pc++ */
DEFCODE1(LOADBOOL, ABC, 0, 1, U, U, 0)

/* OP_TFORLOOP  A C  R(A+3), ...,R(A+3+C) := R(A)(R(A+1), R(A+2));
   if R(A+3) ~= nil then { pc++; R(A+2)=R(A+3); } */
DEFCODE1(TFORLOOP, ABC, 1, 1, N, U, 0)

/* OP_SETFIELD  A B C  R(A)[Kst(B)] := RK(C) */
DEFCODE_R1(SETFIELD, ABC, 0, 1, K, RK, 0)

/* OP_SETTABLE  A B C  R(A)[RK(B)] := RK(C) */
DEFCODE1(SETTABLE_S, ABC, 0, 1, RK, RK, 0)
DEFCODE1(SETTABLE_S_BK, ABC, 0, 1, RK, RK, 0)
DEFCODE1(SETTABLE_N, ABC, 0, 1, RK, RK, 0)
DEFCODE1(SETTABLE_N_BK, ABC, 0, 1, RK, RK, 0)
DEFCODE1(SETTABLE, ABC, 0, 0, RK, RK, 0)
DEFCODE1(SETTABLE_BK, ABC, 0, 0, RK, RK, 0)

/* OP_TAILCALL Lua/C function variants */
DEFCODE_R1(TAILCALL_I, ABC, 0, 1, U, U, 0)
DEFCODE1(TAILCALL_C, ABC, 0, 1, U, U, 0)

/* OP_TAILCALL_M ??? */
DEFCODE1(TAILCALL_M, ABC, 0, 1, U, U, 0)

/* OP_LOADK  A Bx  R(A) := Kst(Bx) */
DEFCODE1(LOADK, ABx, 0, 1, K, N, 0)

/* OP_LOADNIL  A B  R(A) := ... := R(B) := nil */
DEFCODE1(LOADNIL, ABC, 0, 1, R, N, 0)

/* OP_SETGLOBAL  A Bx  Gbl[Kst(Bx)] := R(A) */
DEFCODE1(SETGLOBAL, ABx, 0, 1, K, N, 0)

/* OP_JMP  sBx  pc+=sBx */
DEFCODE1(JMP, AsBx, 0, 0, UK, N, 0)

/* OP_CALL_M ??? */
DEFCODE1(CALL_M, ABC, 0, 1, U, U, 0)

/* OP_CALL  A B C  R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) */
DEFCODE1(CALL, ABC, 0, 1, U, U, 0)

/* ??? */
DEFCODE1(INTRINSIC_INDEX, ABC, 0, 1, U, U, 0)
DEFCODE1(INTRINSIC_NEWINDEX, ABC, 0, 1, U, U, 0)
DEFCODE1(INTRINSIC_SELF, ABC, 0, 1, U, U, 0)
DEFCODE1(INTRINSIC_INDEX_LITERAL, ABC, 0, 1, U, U, 0)
DEFCODE1(INTRINSIC_NEWINDEX_LITERAL, ABC, 0, 1, U, U, 0)
DEFCODE1(INTRINSIC_SELF_LITERAL, ABC, 0, 1, U, U, 0)

/* OP_TAILCALL  A B C  return R(A)(R(A+1), ... ,R(A+B-1)) */
DEFCODE1(TAILCALL, ABC, 0, 1, U, U, 0)

/* OP_GETUPVAL  A B  R(A) := UpValue[B] */
DEFCODE1(GETUPVAL, ABC, 0, 1, U, N, 1)
/* OP_SETUPVAL  A B  UpValue[B] := R(A) */
DEFCODE_R1(SETUPVAL, ABC, 0, 1, U, N, 0)

/* OP_ADD  A B C  R(A) := RK(B) + RK(C) */
DEFCODE1(ADD, ABC, 0, 1, RK, RK, 0)
DEFCODE1(ADD_BK, ABC, 0, 1, RK, RK, 0)

/* OP_SUB  A B C  R(A) := RK(B) - RK(C) */
DEFCODE1(SUB, ABC, 0, 1, RK, RK, 0)
DEFCODE1(SUB_BK, ABC, 0, 1, RK, RK, 0)

/* OP_MUL  A B C  R(A) := RK(B) * RK(C) */
DEFCODE1(MUL, ABC, 0, 1, RK, RK, 0)
DEFCODE1(MUL_BK, ABC, 0, 1, RK, RK, 0)

/* OP_DIV  A B C  R(A) := RK(B) / RK(C) */
DEFCODE1(DIV, ABC, 0, 1, RK, RK, 0)
DEFCODE1(DIV_BK, ABC, 0, 1, RK, RK, 0)

/* OP_MOD  A B C  R(A) := RK(B) % RK(C) */
DEFCODE1(MOD, ABC, 0, 1, RK, RK, 0)
DEFCODE1(MOD_BK, ABC, 0, 1, RK, RK, 0)

/* OP_POW  A B C  R(A) := RK(B) ^ RK(C) */
DEFCODE1(POW, ABC, 0, 1, RK, RK, 0)
DEFCODE1(POW_BK, ABC, 0, 1, RK, RK, 0)

/* OP_NEWTABLE  A B C  R(A) := {} (size = B,C) */
DEFCODE1(NEWTABLE, ABC, 0, 1, U, U, 1)

/* OP_UNM  A B  R(A) := -R(B) */
DEFCODE1(UNM, ABC, 0, 1, R, N, 0)

/* OP_NOT  A B  R(A) := not R(B) */
DEFCODE_R1(NOT, ABC, 0, 1, R, N, 0)

/* OP_LEN  A B  R(A) := length og R(B) */
DEFCODE1(LEN, ABC, 0, 1, R, N, 0)

/* OP_LT  A B C  if ((RK(B) < RK(C)) ~= A) then pc++ */
DEFCODE1(LT, ABC, 1, 0, RK, RK, 0)
DEFCODE1(LT_BK, ABC, 1, 0, RK, RK, 0)

/* OP_LE  A B C  if ((RK(B) <= RK(C)) ~= A) then pc++ */
DEFCODE1(LE, ABC, 1, 0, R, K, 0)
DEFCODE1(LE_BK, ABC, 1, 0, K, K, 0)

/* begin T7 extensions */
/******************************************************************************/
#ifdef LUA_CODT7

/* OP_LEFT_SHIFT  A B C  R(A) := RK(B) << RK(C) */
DEFCODE1(LEFT_SHIFT, ABC, 0, 1, RK, RK, 0)
DEFCODE1(LEFT_SHIFT_BK, ABC, 0, 1, RK, RK, 0)

/* OP_RIGHT_SHIFT  A B C  R(A) := RK(B) >> RK(C) */
DEFCODE1(RIGHT_SHIFT, ABC, 0, 1, RK, RK, 0)
DEFCODE1(RIGHT_SHIFT_BK, ABC, 0, 1, RK, RK, 0)

/* OP_BIT_AND  A B C  R(A) := RK(B) & RK(C) */
DEFCODE1(BIT_AND, ABC, 0, 1, RK, RK, 0)
DEFCODE1(BIT_AND_BK, ABC, 0, 1, RK, RK, 0)

/* OP_BIT_OR  A B C  R(A) := RK(B) | RK(C) */
DEFCODE1(BIT_OR, ABC, 0, 1, RK, RK, 0)
DEFCODE1(BIT_OR_BK, ABC, 0, 1, RK, RK, 0)

#endif /* LUA_CODT7 */
/******************************************************************************/
/* end T7 extensions */

/* OP_CONCAT  A B C  R(A) := R(B).. ... ..R(C) */
DEFCODE1(CONCAT, ABC, 0, 1, U, U, 0)

/* OP_TESTSET  A B C  if (R(B) <=> C) then R(A) := R(B) else pc++ */
DEFCODE1(TESTSET, ABC, 1, 1, R, U, 0)

/* OP_FORPREP  A sBX  R(A)-=R(A+2); pc+=sBx */
DEFCODE1(FORPREP, AsBx, 0, 1, UK, N, 0)
/* OP_FORLOOP  A sBx  R(A)+=R(A+2);
       if R(A) <?= R(A+1) then { pc+=sBx; R(A+3)=R(A) } */
DEFCODE1(FORLOOP, AsBx, 0, 1, UK, N, 0)

/* OP_SETLIST  A B C  R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B */
DEFCODE1(SETLIST, ABC, 0, 1, U, UK, 0)

/* OP_CLOSE  A   close all variables in the stack up to (>=) R(A) */
DEFCODE1(CLOSE, ABC, 0, 1, N, N, 0)

/* OP_CLOSURE  A Bx  R(A) := closure(KPROTO[Bx], R(A), ... ,R(A+n)) */
DEFCODE1(CLOSURE, ABx, 0, 1, U, N, 0)

/* OP_VARARG  A B  R(A), R(A+1), ..., R(A+B-1) = vararg */
DEFCODE1(VARARG, ABC, 0, 1, U, N, 0)

/* R1 variants */
DEFCODE_R1V(TAILCALL_I_R1, ABC, 0, 1, U, U, 0, R1A)
DEFCODE_R1V(CALL_I_R1, ABC, 0, 1, U, U, 0, R1A)
DEFCODE_R1V(SETUPVAL_R1, ABC, 0, 1, U, N, 1, R1A)
DEFCODE_R1V(TEST_R1, ABC, 1, 1, N, U, 0, R1A)
DEFCODE_R1V(NOT_R1, ABC, 0, 1, R, N, 0, R1B)
DEFCODE_R1V(GETFIELD_R1, ABC, 0, 1, R, K, 1, R1B)
DEFCODE_R1V(SETFIELD_R1, ABC, 0, 1, K, RK, 0, R1A)


/* ??? */
DEFCODE1(NEWSTRUCT, ABC, 0, 1, U, U, 1)

/* OP_DATA  A Bx  extra information used by the VM */
DEFCODE1(DATA, ABx, 0, 1, UK, N, 0)

DEFCODE1(SETSLOTN, ABC, 0, 1, N, U, 0)
DEFCODE1(SETSLOTI, ABC, 0, 1, U, RK, 0)
DEFCODE1(SETSLOT, ABC, 0, 1, U, RK, 0)
DEFCODE1(SETSLOTS, ABC, 0, 1, U, R, 0)
DEFCODE1(SETSLOTMT, ABC, 0, 1, U, RK, 0)

/* OP_CHECKTYPE  A Bx  check type of R(A) is Bx */
DEFCODE1(CHECKTYPE, ABx, 0, 1, U, N, 0)
/* OP_CHECKTYPES  A Bx  check type of R(A) is a structure with id Bx  */
DEFCODE1(CHECKTYPES, ABx, 0, 1, U, N, 0)

DEFCODE1(GETSLOT, ABC, 0, 1, R, U, 0)
DEFCODE1(GETSLOTMT, ABC, 0, 1, R, U, 0)
DEFCODE1(SELFSLOT, ABC, 0, 1, R, U, 0)
DEFCODE1(SELFSLOTMT, ABC, 0, 1, R, U, 0)
DEFCODE1(GETFIELD_MM, ABC, 0, 1, R, K, 1)
DEFCODE1(CHECKTYPE_D, ABx, 0, 1, U, N, 0)
DEFCODE1(GETSLOT_D, ABC, 0, 1, R, U, 0)
DEFCODE1(GETGLOBAL_MEM, ABx, 0, 1, K, N, 1)

#if 0
DEFCODE1(DELETE, ABC, 0, 1, RK, U, 0)
DEFCODE1(DELETE_BK, ABC, 0, 1, RK, U, 0)
#endif

/* end of opcodes */

/*===========================================================================
  Notes:
  (*) In OP_CALL, if (B == 0) then B = top. C is the number of returns - 1,
      and can be 0: OP_CALL then sets `top' to last_result+1, so
      next open instruction (OP_CALL, OP_RETURN, OP_SETLIST) may use `top'.

  (*) In OP_VARARG, if (B == 0) then use actual number of varargs and
      set top (like in OP_CALL with C == 0).

  (*) In OP_RETURN, if (B == 0) then return up to `top'

  (*) In OP_SETLIST, if (B == 0) then B = `top';
      if (C == 0) then next `instruction' is real C

  (*) For comparisons, A specifies what condition the test should accept
      (true or false).

  (*) All `skips' (pc++) assume that next instruction is a jump
===========================================================================*/
